#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# Fail immediately on non-zero exit code.
set -e
# Fail immediately on non-zero exit code within a pipeline.
set -o pipefail
# Fail on undeclared variables.
set -u
# Debug, echo every command
#set -x

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BP_DIR=`cd $(dirname $0); cd ..; pwd`
VENDOR_DIR=${BP_DIR}/vendor

# Make dyno runtime-compatible prefix for compiled artifacts
KONG_RUNTIME=kong-runtime
APP_PREFIX=/app/$KONG_RUNTIME
mkdir -p $APP_PREFIX

# Cache compilation artifacts between builds
BP_CACHE_DIR="$CACHE_DIR/heroku-kong-buildpack"
mkdir -p $BP_CACHE_DIR
PREFIX_CACHE_DIR=$BP_CACHE_DIR/app_prefix

# Source for Kong
if [ -f "${ENV_DIR}/KONG_GIT_URL" ]
then
  KONG_GIT_URL=`cat ${ENV_DIR}/KONG_GIT_URL`
else
  KONG_GIT_URL="https://github.com/kong/kong.git"
fi
# commit or tag to checkout
if [ -f "${ENV_DIR}/KONG_GIT_COMMITISH" ]
then
  KONG_GIT_COMMITISH=`cat ${ENV_DIR}/KONG_GIT_COMMITISH`
else
  KONG_GIT_COMMITISH="2.7.0"
fi

KONG_SOURCE_DIR="${BP_CACHE_DIR}/kong-source"


# Set dependency versions.
# These correspond to the archives in `vendor/`.
# If upgrading any those archives, then update the corresponding version here.
LUAROCKS_VERSION=3.8.0
OPENSSL_VERSION=1.1.1l
OPENRESTY_VERSION=1.19.9.1
GOLANG_VERSION=1.17.5

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

# ~~~~~ Keep these values in sync with the runtime profile script above ~~~~~
#/app/buildroot/openresty/nginx/sbin/nginx
export PATH="$APP_PREFIX/nginx/sbin:$APP_PREFIX/luajit/bin:$APP_PREFIX/bin:$APP_PREFIX/go/bin:$BUILD_DIR/.apt/usr/local/bin:$BUILD_DIR/.apt/usr/bin:$BUILD_DIR/.apt/usr/sbin:/sbin:$PATH"
export LD_LIBRARY_PATH="$APP_PREFIX/lib:$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/local/lib:$BUILD_DIR/.apt/usr/lib:/usr/lib/x86_64-linux-gnu:/lib/x86_64-linux-gnu:/usr/lib"
export LIBRARY_PATH="$APP_PREFIX/lib:$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/local/lib:$BUILD_DIR/.apt/usr/lib:/usr/lib/x86_64-linux-gnu:/lib/x86_64-linux-gnu:/usr/lib"
export INCLUDE_PATH="$APP_PREFIX/include:$BUILD_DIR/.apt/usr/local/include:$BUILD_DIR/.apt/usr/include:/usr/include/x86_64-linux-gnu:/usr/include"
export GOPATH=$APP_PREFIX
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/local/lib/pkgconfig:$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig"
export LUA_PATH="$BUILD_DIR/lib/?.lua;$BUILD_DIR/lib/?/init.lua;$BUILD_DIR/.luarocks/share/lua/5.1/?.lua;$BUILD_DIR/.luarocks/share/lua/5.1/?/init.lua;$APP_PREFIX/share/lua/5.1/?.lua;$APP_PREFIX/share/lua/5.1/?/init.lua;./?.lua"
export LUA_CPATH="$BUILD_DIR/lib/?.so;$BUILD_DIR/.luarocks/lib/lua/5.1/?.so;$APP_PREFIX/lib/lua/5.1/?.so;./?.so"

echo "PATH is: $PATH"

#give environment to later buildpacks
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)='  > "$BP_DIR/export"


topic "Building Kong from ${KONG_GIT_URL}#${KONG_GIT_COMMITISH}"
# Move the unfortunately named `.luarocks` spec file so that it doesn't
# interfere during CI. We're migrating Kong apps to use `Rockfile` instead.
if [ -f "$BUILD_DIR/.luarocks" ]; then
  mv "$BUILD_DIR/.luarocks" "$BUILD_DIR/Rockfile"
  echo "Move $BUILD_DIR/.luarocks to $BUILD_DIR/Rockfile" | indent
fi
# Ensure we don't have Kong from a previous build
luarocks remove kong || true
echo "luaroks removes KONG" | indent

if [ -d "$KONG_SOURCE_DIR" ]
then
  echo "Fetch kong  $KONG_GIT_COMMITISH into $KONG_SOURCE_DIR" | indent
  cd $KONG_SOURCE_DIR
  git fetch
  git fetch --tags
  git reset --hard $(git rev-list -n 1 $KONG_GIT_COMMITISH)
else
  echo "Clone $KONG_GIT_URL and checkout $KONG_GIT_COMMITISH into $KONG_SOURCE_DIR" | indent
  git clone $KONG_GIT_URL $KONG_SOURCE_DIR
  cd $KONG_SOURCE_DIR
  git checkout $KONG_GIT_COMMITISH
fi
export OPENSSL_DIR=${APP_PREFIX}
# Install Kong itself from the cloned git repo
luarocks make ./kong-*.rockspec
# Install Kong's dependencies via LuaRocks
# (`--local` is required for this to do anything)
luarocks install --local ./kong-*.rockspec
mkdir -p ${APP_PREFIX}/bin
mv bin/* ${APP_PREFIX}/bin/

RESTY_KONG_TLS_VERSION=0.0.6
RESTY_KONG_TLS_GITHUB_URI=https://raw.githubusercontent.com/Kong/lua-kong-nginx-module
RESTY_KONG_TLS_FILE_URI=$RESTY_KONG_TLS_GITHUB_URI/$RESTY_KONG_TLS_VERSION/lualib/resty/kong/tls.lua
LUAROCKS_SHARE=/app/kong-runtime/share/lua/5.1
mkdir -p $LUAROCKS_SHARE/resty/kong
curl -sSL $RESTY_KONG_TLS_FILE_URI -o $LUAROCKS_SHARE/resty/kong/tls.lua

topic "Downloading and installing golang"
##download and install golang
GO_URL=https://dl.google.com/go/go${GOLANG_VERSION}.linux-amd64.tar.gz
curl $GO_URL -o go${GOLANG_VERSION}.linux-amd64.tar.gz
tar -xz -f go${GOLANG_VERSION}.linux-amd64.tar.gz -C $APP_PREFIX
go get github.com/Kong/go-pluginserver
mkdir ${APP_PREFIX}/go-plugins


topic "Installing Lua rocks specified in Rockfile"
cd ${BUILD_DIR}
${BP_DIR}/bin/install-luarocks

topic "Enabling runtime configuration & processes"
cd ${BP_DIR}
mkdir -p $BUILD_DIR/.profile.d
mv .profile.d/* $BUILD_DIR/.profile.d
mkdir -p $BUILD_DIR/config
mv config/* $BUILD_DIR/config
# Move executables for Procfile into place
mkdir -p $BUILD_DIR/bin
cp $BP_DIR/bin/app/heroku-* $BUILD_DIR/bin/
echo "Runtime available in $BP_DIR" | indent
ls -R ${BP_DIR}

topic "Applying buildpack v6.0.0 backward-compatibility patch"
if [ ! -d ".heroku" ]
then
  echo "Linking '/app/.heroku' to '/app/$KONG_RUNTIME'" | indent
  ln -s "$KONG_RUNTIME/" .heroku
else
  echo "'/app/.heroku' exists. Linking skipped." | indent
  echo "Ensure the app's 'config/kong.conf.etlua' sets the prefix to '/app/$KONG_RUNTIME'" | indent
fi

# Avoid moving build for CI, because build is in the right place already.
if [ ! "$BUILD_DIR" = "/app" ]; then
  topic "Making build artifacts available to app"
  echo "copy files from $APP_PREFIX to $BUILD_DIR/$KONG_RUNTIME" | indent
  cp -r $APP_PREFIX $BUILD_DIR/$KONG_RUNTIME
fi

# run kong post-build if available
if [[ -f $BUILD_DIR/bin/kong-post-build ]]; then
    echo "Running bin/kong-post-build hook" | indent
    chmod a+x $BUILD_DIR/bin/kong-post-build
    $BUILD_DIR/bin/kong-post-build $BUILD_DIR
fi

echo "Buildpack compile success"
